#!/bin/bash
set -euo pipefail

DIR="$(cd "$( dirname "${BASH_SOURCE[0]}" )" && pwd)"

task_family=${BUILDKITE_PLUGIN_ECS_SCHEDULED_TASKS_TASK_FAMILY?}
task_definition=${BUILDKITE_PLUGIN_ECS_SCHEDULED_TASKS_TASK_DEFINITION?}
task_role_arn=${BUILDKITE_PLUGIN_ECS_SCHEDULED_TASKS_TASK_ROLE_ARN:-""}
execution_role=${BUILDKITE_PLUGIN_ECS_SCHEDULED_TASKS_EXECUTION_ROLE_ARN:-""}
events_rule_name=${BUILDKITE_PLUGIN_ECS_SCHEDULED_TASKS_EVENTS_RULE_NAME:-""}
events_rule_description=${BUILDKITE_PLUGIN_ECS_SCHEDULED_TASKS_EVENTS_RULE_DESCRIPTION:-""}
events_rule_role_arn=${BUILDKITE_PLUGIN_ECS_SCHEDULED_TASKS_EVENTS_RULE_ROLE_ARN:-""}
schedule_expression=${BUILDKITE_PLUGIN_ECS_SCHEDULED_TASKS_SCHEDULE_EXPRESSION:-""}
event_pattern=${BUILDKITE_PLUGIN_ECS_SCHEDULED_TASKS_EVENT_PATTERN:-""}
target_definition=${BUILDKITE_PLUGIN_ECS_SCHEDULED_TASKS_EVENTS_TARGET_DEFINITION?}

function register_task_definition() {
  local container_definition_json
  container_definition_json=$(cat "${task_definition}")

  register_command="aws ecs register-task-definition \
      --family ${task_family} \
      --container-definitions '${container_definition_json}'"

  if [[ -n "${task_role_arn}" ]]; then
      register_command+=" --task-role-arn ${task_role_arn}"
  fi

  if [[ -n "${execution_role}" ]]; then
      register_command+=" --execution-role-arn ${execution_role}"
  fi

  echo "--- :ecs: Registering new task definition for ${task_family}"
  json_output=$(eval "${register_command}")
  register_exit_code=$?

  if [[ ${register_exit_code} -ne 0 ]] ; then
    echo "+++ ^^^"
    echo "+++ Failed to register task definition"
    exit "${register_exit_code}"
  fi

  task_arn=$(jq '.taskDefinition.taskDefinitionArn' <<< "$json_output")
  task_revision=$(jq '.taskDefinition.revision' <<< "$json_output")
  echo "Registered ${task_family}:${task_revision}"
}

function create_event_rule() {
  local rule_name=$1
  local description=$2
  local role_arn=$3
  local schedule_expression=$4
  local event_pattern=$5

  local json_output
  json_output=$(aws events describe-rule --name "${rule_name}")
  local rule_status
  rule_status=$(jq -r '.State' <<< "${json_output}")
  local current_role
  current_role=$(jq -r '.RoleArn' <<< "${json_output}")
  if [[ ${rule_status} == "ENABLED" ]] && [[ ${current_role} == "${role_arn}" ]]; then
    return
  fi

  create_event_command="aws events put-rule --name ${rule_name} --description ${description} --role_arn ${role_arn}"

  arg_check=1

  if [[ -n "${event_pattern}" ]]; then
      create_event_command+=" --event_pattern \"${event_pattern}\""
      arg_check=0
  fi

  if [[ -n "${schedule_expression}" ]]; then
      create_event_command+=" --schedule_expression \"${schedule_expression}\""
      arg_check=0
  fi

  if [[ ${arg_check} -eq 1 ]]; then
    echo "+++ You must specify either --schedule-expression or --event-pattern"
    exit 1
  fi

  eval "${create_event_command}"
}

function set_event_target() {
    local ecs_target_definition_json
    ecs_target_definition_json=$(cat "${target_definition}")
    local rule_name=$1
    local task_arn=$2
    local target_definition_template_json
    target_definition_template_json=$(cat "${DIR}/../lib/target-definition.json")
    local current_arn
    current_arn=$(aws events list-targets-by-rule --rule "${rule_name}" --query 'Targets[0].Arn' --output text)
    if [[ $current_arn == "${task_arn}" ]]; then
      echo "Target already set, no action required"
      exit 0
    fi

    ecs_target_definition_json=$(echo "${ecs_target_definition_json}" | jq --arg TASK_ARN "${task_arn}" '.TaskDefinitionArn=$TASK_ARN')
    # parsed_target_definition_json=$(jq -s '.[0].Targets[0] + .[1]' <<< "${target_definition_template_json}" <<< "${ecs_target_definition_json}")
    parsed_target_definition_json=$(jq -s '.${target_definition_template_json.Targets${target_definition_template_json + .${ecs_target_definition_json}')

    echo "--- Setting Events rule target"
    aws events put-targets \
    --rule "${rule_name}" \
    --cli-input-json "${parsed_target_definition_json}"
}

register_task_definition

create_event_rule "${events_rule_name}" "${events_rule_description}" "${events_rule_role_arn}" "${schedule_expression}" "${event_pattern}"
rule_status=$(aws events describe-rule --name "${events_rule_name}" --query 'State' --output text)
if [[ ${rule_status} != "ENABLED" ]]; then
  echo "+++ Failed to create Events rule"
  exit 1
fi

set_event_target "${events_rule_name}" "${task_arn}"
target_count=$(aws events list-targets-by-rule --rule "${events_rule_name}" --query 'length(Targets[*])')
if [[ ${target_count} -gt 0 ]]; then
  echo "Events rule created, and target set successfully ðŸš€"
else
  echo "+++ Failed to set target for Events rule"
  exit 1
fi
